#G is optimal gene number
Genes<-c()
j=1
for (i in unique(id)){
if(numberofGenes[j]>0){
temp<-paste("cluster_lrTest.table.",i,sep="")
temp<-as.name(temp)
temp<-eval(parse(text = temp))
temp<-temp[order(temp$p_val_adj,decreasing=TRUE),]
Genes<-c(Genes,(rownames(temp)[1:min(G,numberofGenes[j])]))
}
j=j+1
}
Genes<-unique(Genes)
ExprSubset<-scdata[Genes,]
Sig<-NULL
for (i in unique(id)){
Sig<-cbind(Sig,(apply(ExprSubset,1,function(y) mean(y[which(id==i)]))))
}
colnames(Sig)<-unique(id)
print("Saving the Signature Matrix file in specified path.")
save(Sig,file=paste(path,"/Sig.RData",sep=""))
return(Sig)
}
Seurat_Test <- SeuratSignatureMatrixGivenDE(dataSC, labels, "results", diff.cutoff=0.5,pval.cutoff=0.01)
View(Ent_MIST)
View(dataSC)
View(dataSC_1)
load("/Users/adrianasistig/Downloads/MIX3cl__bulkESET.RData")
MIX3cl__bulkESET <- readRDS("~/Downloads/MIX3cl__bulkESET.rds")
View(MIX3cl__bulkESET)
MIX3cl_scESET <- readRDS("~/Downloads/MIX3cl_scESET.rds")
View(MIX3cl_scESET)
write.table(MIX3cl__bulkESET$pdata)
MIX_bulk <- write.table(MIX3cl__bulkESET$pdata)
MIX_bulk <- write.table(MIX3cl__bulkESET[,1])
save(MIX3cl__bulkESET, file = "MIX_Bulk.RData")
load("MIX_Bulk.RData")
load("~/Documents/GitHub/DWLS_CRAN/MIX_Bulk.RData")
load("~/Documents/GitHub/DWLS_CRAN/MIX_Bulk.RData")
load("/Users/adrianasistig/Documents/GitHub/DWLS_CRAN/MIX_Bulk.RData")
View(MIX3cl__bulkESET)
View(MIX3cl__bulkESET)
MIX3cl__bulkESET
MIX3cl__bulkESET$assayData
MIX3cl__bulkESET@experimentData
MIX3cl__bulkESET@assayData
MIX3cl__bulkESET@phenoData
MIX3cl__bulkESET@featureData
MIX3cl__bulkESET@annotation
MIX3cl__bulkESET@protocolData
MIX3cl__bulkESET@.__classVersion__
MIX3cl__bulkESET
MIX3cl__bulkESET@assayData[["exprs"]]
MIX3cl__bulkESET@featureData@data[["fdata"]]
MIX3cl__bulkESET@assayData[["exprs"]]
MIX3cl__bulkESET@phenoData@data[["pdata"]]
View(MIX3cl_scESET)
MIX3cl_scESET
MIX3cl_scESET@assayData[["exprs"]]
MIX_bulk <- write.table(MIX3cl_scESET@assayData[["exprs"]])
View(MIX3cl_scESET)
save(MIX3cl_scESET@assayData[["exprs"]], "MIX_bulk.RData")
save(MIX3cl_scESET@assayData[["exprs"]], file = "MIX_bulk.RData")
assay_data <- MIX3cl_scESET@assayData[["exprs"]]
View(assay_data)
View(dataSC_1)
MIX3cl_scESET@phenoData@varMetadata[["labelDescription"]]
MIX3cl_scESET@phenoData@data[["md_cluster"]]
clustering_labels <- MIX3cl_scESET@phenoData@data[["md_cluster"]]
View(cluster_lrTest.table)
labels
Signature_Seurat<-buildSignatureMatrixUsingSeurat(assay_data,id=clustering_labels,path="DWLS_Test",diff.cutoff=0.5,pval.cutoff=0.01)
load("~/Documents/GitHub/DWLS_CRAN/results/de_CycISC.RData")
View(Ent_MIST)
P0113_3clESET <- readRDS("~/Documents/GitHub/DWLS_CRAN/SCDC_Test/P0113_3clESET.rds")
P0113_bulkESET <- readRDS("~/Documents/GitHub/DWLS_CRAN/SCDC_Test/P0113_bulkESET.rds")
View(P0113_3clESET)
View(P0113_bulkESET)
~
)
getwd()
setwd(/Users/adrianasistig/Documents/GitHub/DWLS_CRAN/SCDC_Test)
setwd("/Users/adrianasistig/Documents/GitHub/DWLS_CRAN/SCDC_Test")
getwd()
bulk3cl <- readRDS("/Users/adrianasistig/Documents/GitHub/DWLS_CRAN/SCDC_Test/P0113_bulkESET.rds")
sc3cl <- readRDS("/Users/adrianasistig/Documents/GitHub/DWLS_CRAN/SCDC_Test/P0113_3clESET.rds")
View(bulk3cl)
View(bulk3cl)
View(bulk3cl)
dir.create("DWLS_3cl")
sc3cl$md_cluster
ids <- sc3cl$md_cluster
ids[ids == "MDA-MB468"] <- "MDAMB468"
Signature <- buildSignatureMatrixMAST(scdata=exprs(sc3cl),id= ids,path="DWLS_3cl",diff.cutoff=1,pval.cutoff=0.01)
Signature <- buildSignatureMatrixUsingSeurat(scdata=exprs(sc3cl),id= ids,path="DWLS_3cl",diff.cutoff=1,pval.cutoff=0.01)
dim(ids)
dim(labels)
summary(labels)
summary(ids)
summary(exprs(sc3cl))
#### Adriana Edits ####
bulk_SCDC <- saveRDS(exprs(sc3cl),file=paste("DWLS_3cl","/de_",i,".rds",sep=""))
#### Adriana Edits ####
#Saving the exprs(sc3cl) file as an rds file --> allows the buildSignatureMatrixUsingSeurat function to work more efficiently
bulk_SCDC <- saveRDS(exprs(sc3cl),file=paste("DWLS_3cl",".rds",sep=""))
#### Adriana Edits ####
#Saving the exprs(sc3cl) file as an rds file --> allows the buildSignatureMatrixUsingSeurat function to work more efficiently
bulk_SCDC <- saveRDS(exprs(sc3cl),".rds",sep=""))
#### Adriana Edits ####
#Saving the exprs(sc3cl) file as an rds file --> allows the buildSignatureMatrixUsingSeurat function to work more efficiently
bulk_SCDC <- saveRDS(exprs(sc3cl),".rds")
()
)
stop()
top
stop
stop
sop
op
op
()
quit()
devtools::check()
devtools::check()
library(DWLS)
devtools::check()
install.packages(BioManager)
roxygen2::roxygenise()
rm(list = c("buildSignatureMatrixMAST", "buildSignatureMatrixUsingSeurat", "DEAnalysisMAST", "DEAnalysisSeurat", "DEAnalysisSeuratIdents", "findDampeningConstant", "m.auc", "MASTSignatureMatrixGivenDE", "Mean.in.log2space", "solveDampenedWLS", "solveDam [... truncated]
]
)
))
]
))))))))))))))))
rn
q()
quit()
rm(list = c("buildSignatureMatrixMAST", "buildSignatureMatrixUsingSeurat"))
rm(list = c("buildSignatureMatrixMAST", "buildSignatureMatrixUsingSeurat", "DEAnalysisMAST", "DEAnalysisSeurat", "DEAnalysisSeuratIdents", "findDampeningConstant", "m.auc", "MASTSignatureMatrixGivenDE", "Mean.in.log2space", "solveDampenedWLS"))
rm(list = c("DEAnalysisMAST", "DEAnalysisSeurat", "DEAnalysisSeuratIdents", "findDampeningConstant", "m.auc", "MASTSignatureMatrixGivenDE", "Mean.in.log2space", "solveDampenedWLS"))
roxygen2::roxygenise()
rm(list = c("solveDampenedWLSj", "solveOLS", "solveOLSInternal", "solveSVR", "stat.log2", "trimData", "v.auc"))
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
load("~/Documents/GitHub/DWLS_CRAN/R/sysdata.rda")
load("~/Documents/GitHub/DWLS_CRAN/R/sysdata.rda")
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::build()
devtools::release()
spell_check()
spell_check_files()
install.packages("spell_check_package")
install.packages("spell_check")
install.packages("spelling")
spell_check()
library(spelling)
spell_check()
spell_check(DWLS)
spell_check(DWLS_CRAN)
getwd()
spell_check(pkg = "DWLS", vignettes = TRUE, use_wordlist = TRUE)
devtools::spell_check(pkg = "DWLS")
devtools::spell_check(pkg = "DWLS_CRAN")
devtools::spell_check()
roxygen2::reoxygenize()
roxygen::reoxygenize()
roxygen2::roxygenise()
devtools::release()
devtools::check_rhub()
devtools::build()
devtools::release()
devtools::check_win_devel()
devtools::release()
bulk3cl <- readRDS("/Users/adrianasistig/Documents/GitHub/DWLS_CRAN/SCDC_Test/P0113_bulkESET.rds")
sc3cl <- readRDS("/Users/adrianasistig/Documents/GitHub/DWLS_CRAN/SCDC/SCDC_Test/P0113_3clESET.rds")
bulk3cl <- readRDS("/Users/adrianasistig/Documents/GC Lab/SCDC/SCDC_Test/P0113_bulkESET.rds")
sc3cl <- readRDS("/Users/adrianasistig/Documents/GC Lab/SCDC/SCDC_Test/P0113_3clESET.rds")
library("SCDC")
# Downloaded bulk dataset from here:
# Name: MIX3cl_scESE.rds
qc.3cl <- readRDS("MIX3cl_scESET.rds")
# Downloaded bulk dataset from here:
# Name: MIX3cl_scESE.rds
qc.3cl <- readRDS("/Users/adrianasistig/Documents/GC Lab/SCDC/SCDC_Test/MIX3cl_scESET.rds")
sc3cl.basis <- SCDC_basis_ONE(qc.3cl, ct.varname = qc.3cl$md_cluster, sample =qc.3cl$orig.ident)
sc3cl.basis <- SCDC_basis_ONE(qc.3cl, ct.varname = "md_cluster", sample ="orig.ident")
df.d <- dist(t(log(sc3cl.basis$basis.mvw + 1e-10)), method = "euclidean")
hc1 <- hclust(df.d, method = "complete")
plot(hc1, cex = 0.8, hang = -1, main = "log(basis matrix)")
bulk3cl <- readRDS("MIX3cl__bulkESET.rds")
bulk3cl <- readRDS("/Users/adrianasistig/Documents/GC Lab/SCDC/SCDC_Test/MIX3cl__bulkESET.rds")
sc3cl2 <- qc.3cl
sc3cl2$md_cluster2 <- sc3cl2$md_cluster
sc3cl2$md_cluster2[!sc3cl2$md_cluster2 %in% "NormalFibroblast"] <- "Tumor"
SCDC_3cl_tree <- SCDC_prop_ONE_subcl_marker(bulk.eset = bulk3cl, sc.eset = sc3cl2, ct.varname = "md_cluster",
sample = "orig.ident", ct.sub = unique(sc3cl2$md_cluster),
ct.fl.sub = unique(sc3cl2$md_cluster2) , weight.basis = T,
fl.varname = "md_cluster2", select.marker = T, LFC.lim = 5)
SCDC_3cl_tree$prop.est
roxygen2::roxygenise()
R CMD Rd2pdf DWLS
help("suppressForeignCheck")
utils::suppressForeignCheck(c("Number.of.Cells")
)
utils::suppressForeignCheck(c("Number.of.Cells"))
library(DWLS)
library(Giotto)
installGiottoEnvironmnt()
installGiottoEnvironment()
installGiottoEnvironment(force_environment = TRUE)
getwd()
stwd("/Users/adrianasistig/Documents/GC Lab/Giotto/trendSceek_example"")
)
''
""
setwd("/Users/adrianasistig/Documents/GC Lab/Giotto/trendSceek_example)
')'
""
/
..
""
setwd("/Users/adrianasistig/Documents/GC Lab/Giotto/trendSceek_example")
getwd()
## Example trendSceek script ##
# giotto object
expr_path = system.file("extdata", "seqfish_field_expr.txt.gz", package = 'Giotto')
loc_path = system.file("extdata", "seqfish_field_locs.txt", package = 'Giotto')
seqfish_mini <- createGiottoObject(raw_exprs = expr_path,
spatial_locs = loc_path,
instructions = myinstructions)
## Example trendSceek script ##
# to automatically save figures in save_dir set save_plot to TRUE
temp_dir = getwd()
temp_dir = '~/Temp/'
myinstructions = createGiottoInstructions(save_dir = temp_dir,
save_plot = TRUE,
show_plot = FALSE)
# giotto object
expr_path = system.file("extdata", "seqfish_field_expr.txt.gz", package = 'Giotto')
loc_path = system.file("extdata", "seqfish_field_locs.txt", package = 'Giotto')
seqfish_mini <- createGiottoObject(raw_exprs = expr_path,
spatial_locs = loc_path,
instructions = myinstructions)
install.packages("FactoMiner")
install.packages("FactoMineR")
library("FactoMineR")
# show instructions associated with giotto object (seqfish_mini)
showGiottoInstructions(seqfish_mini)
seqfish_mini <- filterGiotto(gobject = seqfish_mini,
expression_threshold = 0.5,
gene_det_in_min_cells = 20,
min_det_genes_per_cell = 0)
seqfish_mini <- normalizeGiotto(gobject = seqfish_mini, scalefactor = 6000, verbose = T)
seqfish_mini <- addStatistics(gobject = seqfish_mini)
seqfish_mini <- adjustGiottoMatrix(gobject = seqfish_mini,
expression_values = c('normalized'),
covariate_columns = c('nr_genes', 'total_expr'))
trendSceek_output <- trendSceek(
gobject = seqfish_mini,
expression_values = c("normalized", "raw"),
subset_genes = NULL,
nrand = 100,
ncores = 8,
...
)
## Running trendSceek ##
trendSceek_output <- trendSceek(
gobject = seqfish_mini,
expression_values = c("normalized", "raw"),
subset_genes = NULL,
nrand = 100,
ncores = 8)
install.packages("spatstat")
install.packages("spatstat")
library("spatstat")
trendSceek_output <- trendSceek(
gobject = seqfish_mini,
expression_values = c("normalized", "raw"),
subset_genes = NULL,
nrand = 100,
ncores = 8)
install.packages("sf")
trendSceek_output <- trendSceek(
gobject = seqfish_mini,
expression_values = c("normalized", "raw"),
subset_genes = NULL,
nrand = 100,
ncores = 8)
library(devtools)
install_github("r-spatial/sf")
trendSceek_output <- trendSceek(
gobject = seqfish_mini,
expression_values = c("normalized", "raw"),
subset_genes = NULL,
nrand = 100,
ncores = 8)
library(dplyr)
install.packages("sf") #this did not work
trendSceek_output <- trendSceek(
gobject = seqfish_mini,
expression_values = c("normalized", "raw"),
subset_genes = NULL,
nrand = 100,
ncores = 8)
install_github("r-spatial/sf", configure.args = "--with-proj-lib=/usr/local/lib/")
packageVersion("sf")
install_github("r-spatial/sf", configure.args = "--with-proj-lib=/usr/local/lib/")
install.packages("sf", configure.args = "--with-proj-lib=/usr/local/lib/")
trendSceek_output <- trendSceek(
gobject = seqfish_mini,
expression_values = c("normalized", "raw"),
subset_genes = NULL,
nrand = 100,
ncores = 8)
packageVersion("sf")
packageVersion(R)
R.version()
R.Version()
library('trendsceek')
trendSceek_output <- trendSceek(
gobject = seqfish_mini,
expression_values = c("normalized", "raw"),
subset_genes = NULL,
nrand = 100,
ncores = 8)
?trendsceek_test
old.packages()
update.packages()
# update, without prompts for permission/clarification
update.packages(ask = FALSE)
trendSceek_output <- trendSceek(
gobject = seqfish_mini,
expression_values = c("normalized", "raw"),
subset_genes = NULL,
nrand = 100,
ncores = 8)
trendSceek_output <- trendSceek(
gobject = seqfish_mini,
expression_values = c("normalized", "raw"),
subset_genes = NULL,
nrand = 100,
ncores = 8)
library(spatstat); sessionLibs()
traceback()
tinytex::install_tinytex(
)
R CMD Rd2pdf DWLS_CRAN
getwd()
ReferenceManual(pkg = "Rd2md", outdir = getwd())
install.packages("Rd2md")
ReferenceManual(pkg = "Rd2md", outdir = getwd())
library(Rd2md)
ReferenceManual(pkg = "Rd2md", outdir = getwd())
ReferenceManual(pkg = "DWLS", outdir = getwd())
ReferenceManual(pkg = "DWLS_CRAN", outdir = getwd())
devtools::check_win_devel()
devtools:::test(fresh=TRUE)
install.packages("testthat")
install.packages("testthat")
devtools::install_github("r-lib/testthat")
usethis::use_test("DWLS_CRAN")
devtools::check_rhub()
library("tinytex")
tinytex::install_tinytex()
tinytex::pdflatex('test.tex')
tinytex::pdflatex('DESCRIPTION')
tinytex::pdflatex('DESCRIPTION.tex')
build_manual(pkg = "DWLS", path = getwd())
devtools::build_manual(pkg = "DWLS", path = getwd())
devtools::build_manual(pkg = "DWLS.CRAN", path = getwd())
devtools::build_manual(pkg = "as.package(DWLS)", path = getwd())
devtools::build_manual(pkg = "as.package(DWLS_CRAN)", path = getwd())
getwd()
devtools::build_manual(pkg = "DWLS", path = getwd())
devtools::build_manual(pkg = "DWLS", path = getwd())
tinytex::tlmgr_install("makeindex")
devtools::build_manual()
library(DWLS)
install.packages("pagedown")
library(pagedown)
pagedown::chrome_print()
pagedown::chrome_print("Reference_Manual_DWLS.md")
pagedown::chrome_print(rmarkdown::render('Reference_Manual_DWLS.md'))
pagedown::chrome_print(rmarkdown::render('DESCRIPTION'))
pagedown::chrome_print("DESCRIPTION")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("knitr")
render("Reference_Manual.md", "all")
libvrary(knitr)
library("knitr")
library("render")
install.packages("rmarkdown")
library("rmarkdown")
render("Reference_Manual.md", "all")
render("Reference_Manual_DWLS.md", "all")
usethis::use_rmarkdown_template("DESCRIPTION")
pagedown::chrome_print("Manual.Rmd")
pagedown::chrome_print("Manual.Rmd")
pagedown::chrome_print("Manual.Rmd")
pagedown::chrome_print("Manual.Rmd")
pagedown::chrome_print("Manual.Rmd")
pagedown::chrome_print("Manual.Rmd")
pagedown::chrome_print("Manual.Rmd")
devtools::check_win()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
devtools::check_rhub()
library(DWLS)
usethis::use_data_raw()
load("~/Documents/GitHub/DWLS_CRAN/R/sysdata.rda")
devtools::document()
devtools::check(manual=TRUE)
devtools::build()
install.packages('jsonlite', dependencies=TRUE, repos='http://cran.rstudio.com/')
devtools::build_manual(pck = "DWLS", path = NULL)
devtools::build_manual(pkg = "DWLS", path = NULL)
devtools::build_manual(pkg = "DWLS_CRAN", path = NULL)
library(DWLS)
devtools::build_manual(pkg = "DWLS", path = NULL)
devtools::build_manual(pkg = "DWLS_CRAN", path = NULL)
getwd()
devtools::build()
devtools::build_manual(pkg = "DWLS", path = NULL)
devtools::build_manual(pkg = "DWLS", path = /Users/adrianasistig/Documents/GitHub/DWLS_0.1.0.tar.gz)
devtools::build_manual(pkg = "DWLS", path = Users/adrianasistig/Documents/GitHub/DWLS_0.1.0.tar.gz)
devtools::build_manual(pkg = "DWLS_0.1.0.tar.gz", path = Users/adrianasistig/Documents/GitHub)
devtools::build_manual(pkg = "DWLS_0.1.0.tar.gz", path = "Users/adrianasistig/Documents/GitHub:)
)
devtools::build_manual(pkg = "DWLS_0.1.0.tar.gz", path = "Users/adrianasistig/Documents/GitHub")
getwd()
devtools::build()
devtools::build()
devtools::check_win_devel()
devtools::build_manual()
version(devtools)
sessionInfo()
sessionInfo
sessioninfo()
sessioninfo()
sessionInfo*()
sessionInfo()
sessionInfo()
roxygen2::roxygenise()
resaveRdafiles("data/trueLabels.RData", xompress="xz")
resaveRdaFiles("data/trueLabels.RData", xompress="xz")
roxygen2::roxygenise()
Sys.getlocale()
devtools::check_win()
library('devtools')
devtools::check_win()
devtools::check()
devtools::check_win()
devtools::check_win_devel()
devtools::build()
getwd()
ls
setwd("/Users/adrianasistig/Documents/GitHub/DWLS_CRAN")
devtools::build()
devtools::check_win()
devtools::check_win_devel()
devtools::load_all(".")
devtools::load_all(".")
reoxygen2:reoxygenise()
roxygen2:roxygenise()
roxygen:roxygenise()
library('roxygen')
roxygen::roxygenise()
devtools::check()
options("install.lock"=FALSE)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
getwd()
setwd("/Users/adrianasistig/Documents/GitHub/DWLS_CRAN")
devtools::check()
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
devtools::load_all()
devtools::check()
library(devtools)
install.packages(c("ape", "backports", "BH", "broom", "Cairo", "carData", "DBI", "dbscan", "fansi", "fs", "gert", "graphlayouts", "httpuv", "igraph", "Matrix", "metap", "multcomp", "multinet", "openssl", "openxlsx", "parallelly", "pkgbuild", "progressr", "RcppArmadillo", "Rdpack", "rjson", "RSQLite", "Seurat", "sf", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.sparse", "spatstat.utils", "tinytex", "usethis", "wk", "xfun"))
install.packages(c("ape", "backports", "BH", "broom", "Cairo", "carData", "DBI", "dbscan", "fansi", "fs", "gert", "graphlayouts", "httpuv", "igraph", "Matrix", "metap", "multcomp", "multinet", "openssl", "openxlsx", "parallelly", "pkgbuild", "progressr", "RcppArmadillo", "Rdpack", "rjson", "RSQLite", "Seurat", "sf", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.sparse", "spatstat.utils", "tinytex", "usethis", "wk", "xfun"))
install.packages(c("ape", "backports", "BH", "broom", "Cairo", "carData", "DBI", "dbscan", "fansi", "fs", "gert", "graphlayouts", "httpuv", "igraph", "Matrix", "metap", "multcomp", "multinet", "openssl", "openxlsx", "parallelly", "pkgbuild", "progressr", "RcppArmadillo", "Rdpack", "rjson", "RSQLite", "Seurat", "sf", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.sparse", "spatstat.utils", "tinytex", "usethis", "wk", "xfun"))
install.packages(c("ape", "backports", "BH", "broom", "Cairo", "carData", "DBI", "dbscan", "fansi", "fs", "gert", "graphlayouts", "httpuv", "igraph", "Matrix", "metap", "multcomp", "multinet", "openssl", "openxlsx", "parallelly", "pkgbuild", "progressr", "RcppArmadillo", "Rdpack", "rjson", "RSQLite", "Seurat", "sf", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.sparse", "spatstat.utils", "tinytex", "usethis", "wk", "xfun"))
install.packages(c("ape", "backports", "BH", "broom", "Cairo", "carData", "DBI", "dbscan", "fansi", "fs", "gert", "graphlayouts", "httpuv", "igraph", "Matrix", "metap", "multcomp", "multinet", "openssl", "openxlsx", "parallelly", "pkgbuild", "progressr", "RcppArmadillo", "Rdpack", "rjson", "RSQLite", "Seurat", "sf", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.sparse", "spatstat.utils", "tinytex", "usethis", "wk", "xfun"))
install.packages(c("ape", "backports", "BH", "broom", "Cairo", "carData", "DBI", "dbscan", "fansi", "fs", "gert", "graphlayouts", "httpuv", "igraph", "Matrix", "metap", "multcomp", "multinet", "openssl", "openxlsx", "parallelly", "pkgbuild", "progressr", "RcppArmadillo", "Rdpack", "rjson", "RSQLite", "Seurat", "sf", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.sparse", "spatstat.utils", "tinytex", "usethis", "wk", "xfun"))
library(devtools)
library(roxygen2)
devtools::check()
devtools::check()
devtools::check()
devtools::build()
devtools::check()
options(buildtools.check = function(action) TRUE)
library(pkgbuild)
pkgbuild::check_build_tools(debug = TRUE)
devtools::check()
load("/Users/adrianasistig/Documents/GitHub/DWLS_CRAN/data/dataSC_2.RData")
load("/Users/adrianasistig/Documents/GitHub/DWLS_CRAN/data/labels.RData")
labels
devtools::check_win_devel()
setwd("/Users/adrianasistig/Documents/GitHub/DWLS_CRAN")
devtools::check()
devtools::check()
