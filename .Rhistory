#' @export DEAnalysisSeurat
#'
#' @importFrom dplyr "%>%"
#' @importFrom Seurat "FindMarkers"
#'
DEAnalysisSeurat<-function(scdata,id,path)
{ exprObj<-CreateSeuratObject(counts=as.data.frame(scdata), project = "DE")
#print("Calculating differentially expressed genes:")
for (i in unique(id)){
de_group <- FindMarkers(object=exprObj, ident.1 = i, ident.2 = NULL,
only.pos = TRUE,
test.use = "bimod", group.by = as.vector(id))
saveRDS(de_group,file=paste(path,"/de_",i,".rds",sep=""))
save(de_group,file=paste(path,"/de_",i,".RData",sep=""))
#print("RData differential expression results are in the'results' folder")
print(i)
}
}
#' #Run deconvolution
#' Seurat_test2 <- DEAnalysisSeuratIdents(dataSC, labels, "results")
#'
#' @export DEAnalysisSeuratIdents
#'
#' @importFrom Seurat "CreateSeuratObject"
#' @importFrom Seurat "FindMarkers"
#' @importFrom Seurat "Idents"
#'
#'
DEAnalysisSeuratIdents<-function(scdata,id,path)
{ exprObj<- CreateSeuratObject(counts=as.data.frame(scdata), project = "DE")
Idents(object = exprObj) <- as.vector(id)
#print("Calculating differentially expressed genes:")
for (i in unique(id)){
#de_group <- FindMarkers(object=exprObj, ident.1 = i, ident.2 = NULL,
#only.pos = TRUE, test.use = "bimod")
de_group <- FindMarkers(object=exprObj, ident.1 = i, ident.2 = NULL,
only.pos = TRUE, test.use = "MAST")
saveRDS(de_group,file=paste(path,"/de_",i,".rds",sep=""))
save(de_group,file=paste(path,"/de_",i,".RData",sep=""))
}
}
findDampeningConstant<-function(S,B,goldStandard){
solutionsSd<-NULL
sol<-goldStandard
ws<-as.vector((1/(S%*%sol))^2)
wsScaled<-ws/min(ws)
wsScaledMinusInf<-wsScaled
if(max(wsScaled)=="Inf"){
wsScaledMinusInf<-wsScaled[-which(wsScaled=="Inf")]
}
for (j in 1:ceiling(log2(max(wsScaledMinusInf)))){
multiplier<-1*2^(j-1)
wsDampened<-wsScaled
wsDampened[which(wsScaled>multiplier)]<-multiplier
solutions<-NULL
seeds<-c(1:100)
for (i in 1:100){
set.seed(seeds[i]) #make nondeterministic
subset<-sample(length(ws),size=length(ws)*0.5)
fit = lm (B[subset] ~ -1+S[subset,],weights=wsDampened[subset])
sol<-fit$coef*sum(goldStandard)/sum(fit$coef)
solutions<-cbind(solutions,sol)
}
solutionsSd<-cbind(solutionsSd,apply(solutions,1,sd))
}
j<-which.min(colMeans(solutionsSd^2))
return(j)
}
m.auc = function(dataset, grouping)
{ AUC=apply(dataset, 1, function(x) v.auc(x,grouping))
AUC[is.na(AUC)]=0.5
return(AUC)
}
}
}
}
}
}
}
MASTSignatureMatrixGivenDE<-function(scdata,id,path,
diff.cutoff=0.5,pval.cutoff=0.01)
#DEAnalysisMAST(scdata,id,path)
{ numberofGenes<-c()
for (i in unique(id)){
if(file.exists(paste(path,"/",i,"_MIST.RData", sep=""))){
load(file=paste(path,"/",i,"_MIST.RData", sep=""))
pvalue_adjusted<-p.adjust(cluster_lrTest.table[,3], method = "fdr",
n = length(cluster_lrTest.table[,3]))
cluster_lrTest.table<-cbind(cluster_lrTest.table,pvalue_adjusted)
DEGenes<-cluster_lrTest.table$Gene[intersect(which
(pvalue_adjusted<pval.cutoff),
which(cluster_lrTest.table$log2fold_change>diff.cutoff))]
nonMir = grep("MIR|Mir", DEGenes, invert = T)
assign(paste("cluster_lrTest.table.",i,sep=""),
cluster_lrTest.table[which(cluster_lrTest.table$Gene%in%DEGenes[nonMir]),])
numberofGenes<-c(numberofGenes,length(DEGenes[nonMir]))
}
}
#need to reduce number of genes
#for each subset, order significant genes by decreasing fold change,
#choose between 50 and 200 genes
#for each, iterate and choose matrix with lowest condition number
conditionNumbers<-c()
for(G in 50:200){
Genes<-c()
j=1
for (i in unique(id)){
if(numberofGenes[j]>0){
temp<-paste("cluster_lrTest.table.",i,sep="")
temp<-as.name(temp)
temp<-eval(parse(text = temp))
temp<-temp[order(temp$log2fold_change,decreasing=TRUE),]
Genes<-c(Genes,varhandle::unfactor(temp$Gene[1:min(G,
numberofGenes[j])]))
}
j=j+1
}
Genes<-unique(Genes)
#make signature matrix
ExprSubset<-scdata[Genes,]
Sig<-NULL
for (i in unique(id)){
Sig<-cbind(Sig,(apply(ExprSubset,1,function(y) mean(y[which(id==i)]))))
}
colnames(Sig)<-unique(id)
conditionNumbers<-c(conditionNumbers,kappa(Sig))
}
G<-which.min(conditionNumbers)+min(49,numberofGenes-1)
Genes<-c()
j=1
for (i in unique(id)){
if(numberofGenes[j]>0){
temp<-paste("cluster_lrTest.table.",i,sep="")
temp<-as.name(temp)
temp<-eval(parse(text = temp))
temp<-temp[order(temp$log2fold_change,decreasing=TRUE),]
Genes<-c(Genes,varhandle::unfactor(temp$Gene[1:min(G,numberofGenes[j])]))
}
j=j+1
}
Genes<-unique(Genes)
ExprSubset<-scdata[Genes,]
Sig<-NULL
for (i in unique(id)){
Sig<-cbind(Sig,(apply(ExprSubset,1,function(y) mean(y[which(id==i)]))))
}
colnames(Sig)<-unique(id)
save(Sig,file=paste(path,"/Sig.RData",sep=""))
saveRDS(Sig,file=paste(path,"/Sig.rds",sep=""))
return(Sig)
}
#' @examples
#'
#' Mean.in.log2space(dataBulk, 0.1)
#'
#'@export Mean.in.log2space
#'
#'
#' @importFrom dplyr "%>%"
#'
#'
Mean.in.log2space=function(x,pseudo.count) {
return(log2(mean(2^(x)-pseudo.count)+pseudo.count))
}
solveDampenedWLS<-function(S,B){
solution<-solveOLSInternal(S,B)
#solution <- solveSVR(S,B)
iterations<-0
changes<-c()
j<-findDampeningConstant(S,B,solution)
change<-1
while(change>.01 & iterations<1000){
newsolution<-solveDampenedWLSj(S,B,solution,j)
solutionAverage<-rowMeans(cbind(newsolution,matrix(solution,nrow = length(solution),ncol = 4)))
change<-norm(as.matrix(solutionAverage-solution))
solution<-solutionAverage
iterations<-iterations+1
changes<-c(changes,change)
}
print(round(solution/sum(solution),5))
return(solution/sum(solution))
}
solveDampenedWLSj<-function(S,B,goldStandard,j){
multiplier<-1*2^(j-1)
sol<-goldStandard
ws<-as.vector((1/(S%*%sol))^2)
wsScaled<-ws/min(ws)
wsDampened<-wsScaled
wsDampened[which(wsScaled>multiplier)]<-multiplier
W<-diag(wsDampened)
D<-t(S)%*%W%*%S
d<- t(S)%*%W%*%B
A<-cbind(diag(dim(S)[2]))
bzero<-c(rep(0,dim(S)[2]))
sc <- norm(D,"2")
solution<-solve.QP(D/sc,d/sc,A,bzero)$solution
names(solution)<-colnames(S)
return(solution)
}
solveOLS<-function(S,B){
D<-t(S)%*%S
d<-t(S)%*%B
A<-cbind(diag(dim(S)[2]))
bzero<-c(rep(0,dim(S)[2]))
solution<-solve.QP(D,d,A,bzero)$solution
names(solution)<-colnames(S)
print(round(solution/sum(solution),5))
return(solution/sum(solution))
}
solveOLSInternal<-function(S,B){
D<-t(S)%*%S
d<-t(S)%*%B
A<-cbind(diag(dim(S)[2]))
bzero<-c(rep(0,dim(S)[2]))
solution<-solve.QP(D,d,A,bzero)$solution
names(solution)<-colnames(S)
return(solution)
}
solveSVR<-function(S,B){
ub=max(c(as.vector(S),B)) #upper bound
lb=min(c(as.vector(S),B)) #lower bound
Bs=((B-lb)/ub)*2-1
Ss=((S-lb)/ub)*2-1
model<-svm(Ss,Bs, nu=0.5,scale = TRUE, type = "nu-regression",
kernel ="linear",cost = 1)
coef <- t(model$coefs) %*% model$SV
coef[which(coef<0)]<-0
coef<-as.vector(coef)
names(coef)<-colnames(S)
print(round(coef/sum(coef),5))
return(coef/sum(coef))
}
#' @param bulkdata A bulk dataset
#'
#' @return A list of trimmed bulk and single-cell data.
#'
#' @examples
#' trimData(Signature_Matrix = Sig, bulkdata = dataBulk)
#'
#' @export trimData
#'
#' @importFrom dplyr "%>%"
trimData<-function(Signature_Matrix,bulkdata){
Genes<-intersect(rownames(Signature_Matrix),names(bulkdata))
B<-bulkdata[Genes]
S<-Signature_Matrix[Genes,]
return(list("sig"=S,"bulk"=B))
}
v.auc = function(data.v,group.v)
{ prediction.use=prediction(data.v, group.v, 0:1)
perf.use=performance(prediction.use,"auc")
auc.use=round(perf.use@y.values[[1]],3)
return(auc.use)
}
Mast_test <- DEAnalysisMAST(dataSC, labels, "inst/extdata/results")
Mast_test <- DEAnalysisMAST(dataSC, labels, "inst/extdata/results")
Number.of.Cells <- NULL
pseudo.count = 0.1
data.used.log2  <- log2(dataSC+pseudo.count)
colnames(data.used.log2)<-make.unique(colnames(data.used.log2))
diff.cutoff=0.5
dim(DE)}
for (i in unique(id)){
cells.symbol.list2     = colnames(data.used.log2)[which(id==i)]
cells.coord.list2      = match(cells.symbol.list2, colnames(data.used.log2))
cells.symbol.list1     = colnames(data.used.log2)[which(id != i)]
cells.coord.list1      = match(cells.symbol.list1, colnames(data.used.log2))
data.used.log2.ordered  = cbind(data.used.log2[,cells.coord.list1],
data.used.log2[,cells.coord.list2])
group.v <- c(rep(0,length(cells.coord.list1)),
rep(1, length(cells.coord.list2)))
#ouput
log2.stat.result <- stat.log2(data.used.log2.ordered, group.v, pseudo.count)
Auc <- m.auc(data.used.log2.ordered, group.v)
bigtable <- data.frame(cbind(log2.stat.result, Auc))
DE <- bigtable[bigtable$log2_fc >diff.cutoff,]
dim(DE)
}
for (i in unique(labels)){
cells.symbol.list2     = colnames(data.used.log2)[which(id==i)]
cells.coord.list2      = match(cells.symbol.list2, colnames(data.used.log2))
cells.symbol.list1     = colnames(data.used.log2)[which(id != i)]
cells.coord.list1      = match(cells.symbol.list1, colnames(data.used.log2))
data.used.log2.ordered  = cbind(data.used.log2[,cells.coord.list1],
data.used.log2[,cells.coord.list2])
group.v <- c(rep(0,length(cells.coord.list1)),
rep(1, length(cells.coord.list2)))
#ouput
log2.stat.result <- stat.log2(data.used.log2.ordered, group.v, pseudo.count)
Auc <- m.auc(data.used.log2.ordered, group.v)
bigtable <- data.frame(cbind(log2.stat.result, Auc))
DE <- bigtable[bigtable$log2_fc >diff.cutoff,]
dim(DE)
}
head(labels)
id = labels
for (i in unique(id)){
cells.symbol.list2     = colnames(data.used.log2)[which(id==i)]
cells.coord.list2      = match(cells.symbol.list2, colnames(data.used.log2))
cells.symbol.list1     = colnames(data.used.log2)[which(id != i)]
cells.coord.list1      = match(cells.symbol.list1, colnames(data.used.log2))
data.used.log2.ordered  = cbind(data.used.log2[,cells.coord.list1],
data.used.log2[,cells.coord.list2])
group.v <- c(rep(0,length(cells.coord.list1)),
rep(1, length(cells.coord.list2)))
#ouput
log2.stat.result <- stat.log2(data.used.log2.ordered, group.v, pseudo.count)
Auc <- m.auc(data.used.log2.ordered, group.v)
bigtable <- data.frame(cbind(log2.stat.result, Auc))
DE <- bigtable[bigtable$log2_fc >diff.cutoff,]
dim(DE)
}
data.used.log2  <- log2(dataSC_3+pseudo.count)
colnames(data.used.log2)<-make.unique(colnames(data.used.log2))
diff.cutoff=0.5
id = labels
for (i in unique(id)){
cells.symbol.list2     = colnames(data.used.log2)[which(id==i)]
cells.coord.list2      = match(cells.symbol.list2, colnames(data.used.log2))
cells.symbol.list1     = colnames(data.used.log2)[which(id != i)]
cells.coord.list1      = match(cells.symbol.list1, colnames(data.used.log2))
data.used.log2.ordered  = cbind(data.used.log2[,cells.coord.list1],
data.used.log2[,cells.coord.list2])
group.v <- c(rep(0,length(cells.coord.list1)),
rep(1, length(cells.coord.list2)))
#ouput
log2.stat.result <- stat.log2(data.used.log2.ordered, group.v, pseudo.count)
Auc <- m.auc(data.used.log2.ordered, group.v)
bigtable <- data.frame(cbind(log2.stat.result, Auc))
DE <- bigtable[bigtable$log2_fc >diff.cutoff,]
dim(DE)
}
cells.symbol.list2
data.used.log2
load("~/Documents/GitHub/DWLS_CRAN/inst/extdata/dataSC.RData")
dataSC_mini <- dataSC[,1:50]
Number.of.Cells <- NULL
pseudo.count = 0.1
data.used.log2  <- log2(dataSC_mini+pseudo.count)
colnames(data.used.log2)<-make.unique(colnames(data.used.log2))
diff.cutoff=0.5
id = labels
for (i in unique(id)){
cells.symbol.list2     = colnames(data.used.log2)[which(id==i)]
cells.coord.list2      = match(cells.symbol.list2, colnames(data.used.log2))
cells.symbol.list1     = colnames(data.used.log2)[which(id != i)]
cells.coord.list1      = match(cells.symbol.list1, colnames(data.used.log2))
data.used.log2.ordered  = cbind(data.used.log2[,cells.coord.list1],
data.used.log2[,cells.coord.list2])
}
cells.symbol.list2
cells.coord.list2
cells.symbol.list1
colnames(data.used.log2)
dim(labels)
load("~/Documents/GitHub/DWLS_CRAN/data/labels.RData")
load("~/Documents/GitHub/DWLS_CRAN/data/trueLabels.RData")
load("~/Documents/GitHub/DWLS_CRAN/data/dataBulk.RData")
dataSC_mini <- dataSC[,1:50]
Number.of.Cells <- NULL
pseudo.count = 0.1
data.used.log2  <- log2(dataSC_mini+pseudo.count)
colnames(data.used.log2)<-make.unique(colnames(data.used.log2))
diff.cutoff=0.5
id = labels
for (i in unique(id)){
cells.symbol.list2     = colnames(data.used.log2)[which(id==i)]
cells.coord.list2      = match(cells.symbol.list2, colnames(data.used.log2))
cells.symbol.list1     = colnames(data.used.log2)[which(id != i)]
cells.coord.list1      = match(cells.symbol.list1, colnames(data.used.log2))
data.used.log2.ordered  = cbind(data.used.log2[,cells.coord.list1],
data.used.log2[,cells.coord.list2])
}
cells.symbol.list2
head(dataSC)
dim(dataSC)
View(dataSC)
View(dataSC_mini)
dim(dataSC_mini)
dim(dataSC)
colnames(data.used.log2)
id <- labels
for (i in unique(id)){
cells.symbol.list2     = colnames(data.used.log2)[which(id==i)]
}
cells.symbol.list2
for (i in unique(labels)){
cells.symbol.list2     = colnames(data.used.log2)[which(labels==i)]
}
cells.symbol.list2
for (i in unique(od)){
cells.symbol.list2     = colnames(data.used.log2)[which(id==i)]
}
for (i in unique(id)){
cells.symbol.list2     = colnames(data.used.log2)[which(id==i)]
}
id
Number.of.Cells <- NULL
pseudo.count = 0.1
data.used.log2  <- log2(dataSC+pseudo.count)
colnames(data.used.log2)<-make.unique(colnames(data.used.log2))
diff.cutoff=0.5
id <- labels
for (i in unique(id)){
cells.symbol.list2     = colnames(data.used.log2)[which(id==i)]
}
cells.symbol.list2
dataSC_mini <- dataSC[,20:30]
Number.of.Cells <- NULL
pseudo.count = 0.1
data.used.log2  <- log2(dataSC_mini+pseudo.count)
colnames(data.used.log2)<-make.unique(colnames(data.used.log2))
diff.cutoff=0.5
id <- labels
for (i in unique(id)){
cells.symbol.list2     = colnames(data.used.log2)[which(id==i)]
}
cells.symbol.list2
Number.of.Cells <- NULL
pseudo.count = 0.1
data.used.log2  <- log2(dataSC+pseudo.count)
colnames(data.used.log2)<-make.unique(colnames(data.used.log2))
diff.cutoff=0.5
id <- labels
for (i in unique(id)){
cells.symbol.list2     = colnames(data.used.log2)[which(id==i)]
}
cells.symbol.list2
load(url("https://github.com/sistia01/DWLS/blob/main/inst/extdata/dataSC.RData"))
working_directory <- getwd()
}
}
}
}
}
readRDS(url("https://github.com/sistia01/DWLS/blob/main/inst/extdata/dataSC.RData"))
roxygen2::roxygenise()
devtools::check()
devtools::check()
getwd()
setwd("/Users/adrianasistig/Documents/GitHub/DWLS_CRAN")
getwd()
devtools::check()
devtools::run_examples()
rm(list = c("buildSignatureMatrixMAST", "buildSignatureMatrixUsingSeurat", "DEAnalysisMAST", "DEAnalysisSeurat", "DEAnalysisSeuratIdents", "findDampeningConstant", "m.auc", "MASTSignatureMatrixGivenDE", "Mean.in.log2space", "solveDampenedWLS", "solveDampenedWLSj", "solveOLS", "solveOLSInternal", "solveSVR", "trimData")
)
rm(list = c("buildSignatureMatrixMAST", "buildSignatureMatrixUsingSeurat", "DEAnalysisMAST", "DEAnalysisSeurat", "DEAnalysisSeuratIdents", "findDampeningConstant", "m.auc", "MASTSignatureMatrixGivenDE", "Mean.in.log2space", "solveDampenedWLS", "solveDampenedWLSj", "solveOLS", "solveOLSInternal", "solveSVR", "trimData")
)
devtools::run_examples()
load("~/Documents/GitHub/DWLS_CRAN/.RData")
devtools::check()
devtools::run_examples()
rm(list = c("buildSignatureMatrixMAST", "buildSignatureMatrixUsingSeurat", "DEAnalysisMAST", "DEAnalysisSeurat", "DEAnalysisSeuratIdents", "findDampeningConstant", "m.auc", "MASTSignatureMatrixGivenDE", "Mean.in.log2space", "solveDampenedWLS"))
devtools::run_examples()
rm(list = c("solveDampenedWLSj", "solveOLS", "solveOLSInternal", "solveSVR", "trimData", "v.auc"))
devtools::run_examples()
rm(list = c("buildSignatureMatrixMAST", "buildSignatureMatrixUsingSeurat", "DEAnalysisMAST", "DEAnalysisSeurat", "DEAnalysisSeuratIdents", "findDampeningConstant", "m.auc", "MASTSignatureMatrixGivenDE", "Mean.in.log2space", "solveDampenedWLS"))
rm(list = c("solveDampenedWLSj", "solveOLS", "solveOLSInternal", "solveSVR", "trimData", "v.auc"))
roxygen2::roxygenise()
devtools::run_examples()
roxygen2::roxygenise()
devtools::run_examples()
roxygen2::roxygenise()
devtools::run_examples()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::run_examples()
roxygen2::roxygenise()
devtools::run_examples()
roxygen2::roxygenise()
devtools::run_examples()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::run_examples()
roxygen2::roxygenise()
devtools::run_examples()
devtools::check()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::run_examples()
roxygen2::roxygenise()
devtools::check()
devtools::check()
roxygen2::roxygenise()
devtools::check()
getwd()
roxygen2::roxygenise()
roxygen2::roxygenise()
Mast_test <- DEAnalysisMAST(dataSC, labels, "inst/extdata/results")
roxygen2::roxygenise()
devtools::check*()
devtools::check()
load(dataSC, data)
load(dataSC, /data)
load(dataSC, data/)
load(dataSC, "data")
load(dataSC, "/data")
download.file("https://github.com/sistia01/DWLS/raw/main/inst/extdata/labels.RData","labels.RData")
load("labels.RData", data)
download.file("https://github.com/sistia01/DWLS/raw/main/inst/extdata/labels.RData","/datalabels.RData")
download.file("https://github.com/sistia01/DWLS/raw/main/inst/extdata/labels.RData","data/labels.RData")
load("data/labels.RData")
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
url <- "https://github.com/sistia01/DWLS/raw/main/inst/extdata/dataSC.RData"
dest <- "data/dataSC.RData"
download.file(url, dest)
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::check()
